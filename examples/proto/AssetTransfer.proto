//
// SPDX-License-Identifier: Apache-2.0
//

// need generator for a sample 

syntax = "proto3";
package assettransfer;

import "fabric/contract.proto";
import "fabric/metadata.proto";

// common result message
message ContractResult {
    int32 code = 1;
    string msg = 2;
}


// Money is expressed as the value of the minor currency unit
// eg cent or penny
// and the ISO4217 Code (https://en.wikipedia.org/wiki/ISO_4217)
message Monetary {
    uint32 minorvalue = 1; // unsigned
    string currency = 2 [(fabric.typeInfo).pattern="[A-Z][A-Z][A-Z]"];
}

// This is the full description of the asset that will be held in
// the private data collections, and will be hashed in other locations
// or referred to via uuid
message Asset {
    option (fabric.network_serialization).defaultstyle = JSON;
    option (fabric.ledger_serialization).defaultstyle = JSON;

    message Key {
        string partnumber = 1;
        string subtype = 2;
    }

    Key uuid = 1;
    string title = 2; // brief title eg.  "The Mona Lisa"
    
    enum State {
        UNKNOWN = 0;
        OWNED = 1;
        MARKETED = 2;
    }
    State state = 3;
}

// a representation of an owner
message Owner {
    option (fabric.network_serialization).defaultstyle = JSON;
    option (fabric.ledger_serialization).defaultstyle = JSON;

    message Key {
        string uuid = 1;
    }
}

// links the asset and the owner
message Ownership {
    Owner.Key owner = 1;
    Asset.Key asset = 2; 
}

// ---------------------------------------------------------------------
// Transactions:  
// For each there is a Request and Result type
message BuyAgreementTx {
    message Request {
        string    expiryTimestamp = 3 [(fabric.typeInfo).format=DATE_TIME];
        Asset.Key asset = 1           [(fabric.transient)=true];
        Monetary  price = 2           [(fabric.transient)=true];        
    }

    message Result {
        ContractResult result = 1;
    }
}

message ConfirmBuyAgreementTx {
    message Request {
        Asset.Key asset = 1           [(fabric.transient)=true];
        Monetary  price = 2           [(fabric.transient)=true];        
    }

    message Result {
        ContractResult result = 1;
    }
}

message AssetExistsTx {
    message Request {
        Asset.Key key = 1;
    }
    message Result {
        ContractResult result =1;
    }
}

message ReadAssetTx {
    message Request {
        Asset.Key key = 1;
    }
    message Result {
        ContractResult result = 1;
        Asset          asset = 2;
    }
}

message CreateAssetTx {
    message Request{  
        Asset.Key key = 1;
       string value = 2;
    }
    message Result {
        ContractResult result =1;
    }
}

message UpdateAssetTx {
    message Request{  
        Asset.Key key = 1;
       string value = 2;
    }
    message Result {
        ContractResult result =1;
    }
}

message DeleteAssetTx {
    message Request {
        Asset.Key key = 1;
    }
    message Result {
        ContractResult result =1;
    }
}


// API definitions
service AssetTransfer {
    rpc propseBuyAgreement(BuyAgreementTx.Request) returns (BuyAgreementTx.Result);
    rpc confirmBuyAgreement(ConfirmBuyAgreementTx.Request) returns (ConfirmBuyAgreementTx.Result);

    rpc assetExists (AssetExistsTx.Request) returns (AssetExistsTx.Result);
    rpc createAsset (CreateAssetTx.Request) returns (CreateAssetTx.Result);
    rpc readAsset (ReadAssetTx.Request) returns (ReadAssetTx.Result);
    rpc updateAsset (UpdateAssetTx.Request) returns (UpdateAssetTx.Result);
    rpc deleteAsset (DeleteAssetTx.Request) returns (DeleteAssetTx.Result);
}